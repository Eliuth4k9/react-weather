{"version":3,"sources":["components/DisplayWeather.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayWeather","props","data","iconurl","cod","weather","icon","className","Fragment","name","Date","toLocaleTimeString","Math","floor","main","temp","src","alt","srcSet","description","humidity","value","visibility","wind","speed","sys","sunrise","sunset","message","Weather","useState","setWeather","city","form","setForm","APIKEY","e","a","preventDefault","alert","fetch","then","res","json","type","placeholder","onChange","target","handlChange","onClick","weatherData","undefined","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1319af89.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./displayweather.css\";\r\nfunction DisplayWeather(props) {\r\n  const { data } = props;\r\n  const iconurl =\r\n    \"http://openweathermap.org/img/w/\" +\r\n    `${data.cod !== 404 ? data.weather[0].icon : null}` +\r\n    \".png\";\r\n  return (\r\n    <div className=\"displayweather\">\r\n      {data.cod !== 404 ? (\r\n        <React.Fragment>\r\n          <div className=\"maincard\">\r\n            <span className=\"cardtitle\">\r\n              {data.name}. Weather\r\n            </span>\r\n            <span className=\"cardsubtitle\">\r\n              As of {new Date().toLocaleTimeString()}\r\n            </span>\r\n\r\n            <h1>\r\n              {\" \"}\r\n              {Math.floor((data.main.temp - 273.15) * 9/5 ) +32}\r\n              <sup>o</sup>\r\n            </h1>\r\n            <span className=\"weather-main\">{data.weather[0].main}</span>\r\n            <img className=\"weather-icon\" src={iconurl} alt=\"\" srcSet=\"\" />\r\n            <span className=\"weather-description\">\r\n              {\" \"}\r\n              {data.weather[0].description}\r\n            </span>\r\n          </div>\r\n          <div className=\"weatherdetails\">\r\n            <div className=\"section1\">\r\n              <table>\r\n                <tbody>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Humidity</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>{data.main.humidity} %</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>UV</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>{data.value} %</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Visibility</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>{data.visibility / 1000} Km</span>\r\n                  </td>\r\n                </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"section2\">\r\n              <table>\r\n                <tbody>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Wind</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>{Math.floor((data.wind.speed * 18) / 5)} km/hr</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Sunrise</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>\r\n                      {new Date(data.sys.sunrise * 1000).toLocaleTimeString()}\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Sunset</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>\r\n                      {new Date(data.sys.sunset * 1000).toLocaleTimeString()}\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      ) : (\r\n        <div className=\"maincard\">\r\n          <h2>{data.message}</h2>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DisplayWeather;","import React, { useState } from \"react\";\r\nimport DisplayWeather from \"./DisplayWeather\";\r\nimport \"./weather.css\";\r\n\r\nfunction Weather() {\r\n  const [weather, setWeather] = useState([]);\r\n  const [form, setForm] = useState({\r\n    city: \"\",\r\n  });\r\n\r\n  const APIKEY = \"a0fe58708e6d694a289790f09cf8e633\";\r\n  async function weatherData(e) {\r\n    e.preventDefault();\r\n    if (form.city === \"\") {\r\n      alert(\"Add values\");\r\n    } else {\r\n      const data = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${form.city},&APPID=${APIKEY}`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((data) => data);\r\n\r\n      setWeather({ data: data });\r\n    }\r\n  }\r\n\r\n  const handlChange = (e) => {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n\r\n    if (name === \"city\") {\r\n      setForm({ ...form, city: value });\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"weather\">\r\n      <span className=\"title\">Weather App</span>\r\n      <br />\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"city\"\r\n          name=\"city\"\r\n          onChange={(e) => handlChange(e)}\r\n        />\r\n        <button className=\"getweather\" onClick={(e) => weatherData(e)}>\r\n          Search\r\n        </button>\r\n      </form>\r\n      {weather.data !== undefined ? (\r\n        <div>\r\n          <DisplayWeather data={weather.data} />\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Weather;","import React from \"react\";\nimport \"./App.css\";\nimport Weather from \"./components/Weather\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}